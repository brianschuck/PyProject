py -3 -m robotpy

You can pass the --help argument to see more information about the subcommand. For example, to see help for the sim 
command you can do the following:

py -3 -m robotpy sim --help


py -3 -m robotpy deploy

When successful, you will see a SUCCESS: Deploy was successful! message.

When deploying the code to the roboRIO, you can have immediate feedback by adding the option –nc. This will cause the deploy command to show your program’s console output, by launching a netconsole listener.
Windows

py -3 -m robotpy deploy --nc



In the event that the tests are failing but you want to upload the code anyway, you can skip them by adding the option –skip-tests.
Windows

py -3 -m robotpy deploy --skip-tests



Optional WPILib components:
	

robotpy_extras
	

requires

Apriltag
	

apriltag
	

robotpy-apriltag

Commands
	

commands2
	

robotpy-commands-v2

cscore
	

cscore
	

robotpy-cscore

Romi
	

romi
	

robotpy-romi

XRP
	

xrp
	

robotpy-xrp

Optional vendor-specific components (not all are available at the beginning of the season):
	

Origin
	

robotpy_extras
	

requires

ChoreoLib
	

Vendor
		

sleipnirgroup-choreolib

CTRE Phoenix 6
	

Vendor
	

phoenix6
	

phoenix6

CTRE Phoenix 5
	

Community
	

phoenix5
	

robotpy-ctre

PathPlannerLib
	

Vendor
	

pathplannerlib
	

robotpy-pathplannerlib

PhotonVision
	

Vendor
	

photonvision
	

photonlibpy

Playing With Fusion
	

Community
	

playingwithfusion
	

robotpy-playingwithfusion

REVLib
	

Community
	

rev
	

robotpy-rev

Studica
	

Community
	

navx
	

robotpy-navx

URCL
	

Community
		

robotpy-urcl